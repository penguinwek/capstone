{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/Users/robekoc/projects/capstone/uploadToS3/pages/index.tsx\";\nimport React from 'react';\nimport { S3 } from 'aws-sdk';\nvar accessKeyId = 'AKIAWU5KMJHA6YDCYV3X';\nvar secretAccessKey = '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';\nvar region = 'ap-southeast-1';\nvar s3 = new S3({\n  secretAccessKey: secretAccessKey,\n  accessKeyId: accessKeyId,\n  region: region\n});\nexport default (function () {\n  var fileRef = React.useRef(null);\n\n  var handleSubmit =\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(event) {\n      var file, url;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              event.preventDefault();\n              _context.prev = 1;\n\n              if (!(!fileRef.current || !fileRef.current.files)) {\n                _context.next = 4;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 4:\n              file = fileRef.current.files[0];\n              _context.next = 7;\n              return makeSignedURL({\n                filename: file.name,\n                filetype: file.type\n              });\n\n            case 7:\n              url = _context.sent;\n              console.log('A name was submitted', url);\n              _context.next = 11;\n              return uploadToS3(url, file);\n\n            case 11:\n              _context.next = 16;\n              break;\n\n            case 13:\n              _context.prev = 13;\n              _context.t0 = _context[\"catch\"](1);\n              console.log(_context.t0);\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 13]]);\n    }));\n\n    return function handleSubmit(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, \"Hello, World!\", React.createElement(\"form\", {\n    method: \"post\",\n    onSubmit: function onSubmit(event) {\n      return handleSubmit(event);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \"Upload file to S3:\", React.createElement(\"input\", {\n    type: \"file\",\n    name: \"file-upload\",\n    ref: fileRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  })), React.createElement(\"input\", {\n    type: \"submit\",\n    value: \"Submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  })));\n});\n\nvar makeSignedURL =\n/*#__PURE__*/\nfunction () {\n  var _ref3 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(_ref2) {\n    var filename, filetype, signedUrl;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            filename = _ref2.filename, filetype = _ref2.filetype;\n            _context2.next = 3;\n            return new _Promise(function (resolve, reject) {\n              var signedUrlExpireSeconds = 60 * 60;\n              s3.getSignedUrl('putObject', {\n                Expires: signedUrlExpireSeconds,\n                Bucket: 'captone-robekoc',\n                Path: '/uploads/',\n                Key: filename,\n                ACL: 'bucket-owner-full-control',\n                ContentType: filetype\n              }, function (err, url) {\n                if (err) {\n                  console.log(\"AHHHHHHHHH\");\n                  reject(err);\n                }\n\n                resolve(url);\n              });\n            });\n\n          case 3:\n            signedUrl = _context2.sent;\n            return _context2.abrupt(\"return\", signedUrl);\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function makeSignedURL(_x2) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nvar uploadToS3 =\n/*#__PURE__*/\nfunction () {\n  var _ref4 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3(url, file) {\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return fetch(url, {\n              body: file,\n              method: \"PUT\"\n            });\n\n          case 2:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function uploadToS3(_x3, _x4) {\n    return _ref4.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/robekoc/projects/capstone/uploadToS3/pages/index.tsx"],"names":["React","S3","accessKeyId","secretAccessKey","region","s3","fileRef","useRef","handleSubmit","event","preventDefault","current","files","file","makeSignedURL","filename","name","filetype","type","url","console","log","uploadToS3","resolve","reject","signedUrlExpireSeconds","getSignedUrl","Expires","Bucket","Path","Key","ACL","ContentType","err","signedUrl","fetch","body","method"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { S3 } from 'aws-sdk'\n\nconst accessKeyId = 'AKIAWU5KMJHA6YDCYV3X'\nconst secretAccessKey = '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'\nconst region = 'ap-southeast-1'\n\nconst s3 = new S3({\n    secretAccessKey,\n    accessKeyId,\n    region\n})\n\nexport default () => {\n    const fileRef = React.useRef<HTMLInputElement>(null)\n\n    const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault()\n        try {\n            if (!fileRef.current || !fileRef.current.files) return\n            const file = fileRef.current.files[0]\n\n            const url = await makeSignedURL({filename: file.name, filetype: file.type})\n            console.log('A name was submitted', url)\n\n            await uploadToS3(url, file)\n\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    return (\n        <div>\n            Hello, World!\n\n            <form method='post' onSubmit={(event) => handleSubmit(event)}>\n                <label>\n                    Upload file to S3:\n                    <input type=\"file\" name=\"file-upload\" ref={fileRef}/>\n                </label>\n                <input type=\"submit\" value=\"Submit\"/>  \n            </form>\n        </div>\n    )\n} \n\ninterface makeSignedURLArgs {\n    filename: string,\n    filetype: string\n}\n\nconst makeSignedURL = async ({filename, filetype}: makeSignedURLArgs): Promise<string> => {\n    const signedUrl = await new Promise((resolve: (value: string) => void, reject) => {\n        const signedUrlExpireSeconds = 60 * 60;\n        s3.getSignedUrl('putObject', {\n            Expires: signedUrlExpireSeconds, \n            Bucket: 'captone-robekoc',\n            Path: '/uploads/',\n            Key: filename, \n            ACL: 'bucket-owner-full-control',\n            ContentType: filetype\n        }, (err, url) => {\n            if (err) {\n                console.log(\"AHHHHHHHHH\")\n                reject(err)\n            }\n            resolve(url) \n        })\n    })\n    \n    return signedUrl\n}\n\nconst uploadToS3 = async (url: string, file: File) => {\n    await fetch(url, {body: file, method: \"PUT\"})\n}"]},"metadata":{},"sourceType":"module"}