{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nvar _jsxFileName = \"/Users/robekoc/projects/capstone/uploadToS3/pages/index.tsx\";\nimport React from 'react';\nimport { S3 } from 'aws-sdk';\nconst accessKeyId = 'AKIAWU5KMJHA6YDCYV3X';\nconst secretAccessKey = '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';\nconst region = 'ap-southeast-1';\nconst s3 = new S3({\n  secretAccessKey,\n  accessKeyId,\n  region\n});\nexport default (() => {\n  const fileRef = React.useRef(null);\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n\n    try {\n      if (!fileRef.current || !fileRef.current.files) return;\n      const file = fileRef.current.files[0];\n      const url = await makeSignedURL({\n        filename: file.name,\n        filetype: file.type\n      });\n      console.log('A name was submitted', url);\n      await uploadToS3(url, file);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, \"Hello, World!\", React.createElement(\"form\", {\n    method: \"post\",\n    onSubmit: event => handleSubmit(event),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \"Upload file to S3:\", React.createElement(\"input\", {\n    type: \"file\",\n    name: \"file-upload\",\n    ref: fileRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  })), React.createElement(\"input\", {\n    type: \"submit\",\n    value: \"Submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  })));\n});\n\nconst makeSignedURL = async ({\n  filename,\n  filetype\n}) => {\n  const signedUrl = await new _Promise((resolve, reject) => {\n    const signedUrlExpireSeconds = 60 * 60;\n    s3.getSignedUrl('putObject', {\n      Expires: signedUrlExpireSeconds,\n      Bucket: 'capstone-robekoc',\n      // Path: '/uploads/',\n      Key: filename,\n      ACL: 'bucket-owner-full-control',\n      ContentType: filetype\n    }, (err, url) => {\n      if (err) {\n        console.log(\"AHHHHHHHHH\");\n        reject(err);\n      }\n\n      resolve(url);\n    });\n  });\n  return signedUrl;\n};\n\nconst uploadToS3 = async (url, file) => {\n  await fetch(url, {\n    body: file,\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": file.type\n    }\n  });\n};","map":{"version":3,"sources":["/Users/robekoc/projects/capstone/uploadToS3/pages/index.tsx"],"names":["React","S3","accessKeyId","secretAccessKey","region","s3","fileRef","useRef","handleSubmit","event","preventDefault","current","files","file","url","makeSignedURL","filename","name","filetype","type","console","log","uploadToS3","error","signedUrl","resolve","reject","signedUrlExpireSeconds","getSignedUrl","Expires","Bucket","Key","ACL","ContentType","err","fetch","body","method","headers"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { S3 } from 'aws-sdk'\n\nconst accessKeyId = 'AKIAWU5KMJHA6YDCYV3X'\nconst secretAccessKey = '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'\nconst region = 'ap-southeast-1'\n\nconst s3 = new S3({\n    secretAccessKey,\n    accessKeyId,\n    region\n})\n\nexport default () => {\n    const fileRef = React.useRef<HTMLInputElement>(null)\n\n    const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault()\n        try {\n            if (!fileRef.current || !fileRef.current.files) return\n            const file = fileRef.current.files[0]\n\n            const url = await makeSignedURL({filename: file.name, filetype: file.type})\n            console.log('A name was submitted', url)\n\n            await uploadToS3(url, file)\n\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    return (\n        <div>\n            Hello, World!\n\n            <form method='post' onSubmit={(event) => handleSubmit(event)}>\n                <label>\n                    Upload file to S3:\n                    <input type=\"file\" name=\"file-upload\" ref={fileRef}/>\n                </label>\n                <input type=\"submit\" value=\"Submit\"/>  \n            </form>\n        </div>\n    )\n} \n\ninterface makeSignedURLArgs {\n    filename: string,\n    filetype: string\n}\n\nconst makeSignedURL = async ({filename, filetype}: makeSignedURLArgs): Promise<string> => {\n    const signedUrl = await new Promise((resolve: (value: string) => void, reject) => {\n        const signedUrlExpireSeconds = 60 * 60;\n        s3.getSignedUrl('putObject', {\n            Expires: signedUrlExpireSeconds, \n            Bucket: 'capstone-robekoc',\n            // Path: '/uploads/',\n            Key: filename, \n            ACL: 'bucket-owner-full-control',\n            ContentType: filetype\n        }, (err, url) => {\n            if (err) {\n                console.log(\"AHHHHHHHHH\")\n                reject(err)\n            }\n            resolve(url) \n        })\n    })\n    \n    return signedUrl\n}\n\nconst uploadToS3 = async (url: string, file: File) => {\n    await fetch(url, {body: file, method: \"PUT\", headers: {\"Content-Type\": file.type}})\n}"]},"metadata":{},"sourceType":"module"}