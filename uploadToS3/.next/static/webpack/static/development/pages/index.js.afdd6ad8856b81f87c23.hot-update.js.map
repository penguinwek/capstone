{"version":3,"file":"static/webpack/static/development/pages/index.js.afdd6ad8856b81f87c23.hot-update.js","sources":["webpack:///./pages/index.tsx"],"sourcesContent":["import React from 'react'\nimport { S3 } from 'aws-sdk'\n\nconst accessKeyId = 'AKIAWU5KMJHA6YDCYV3X'\nconst secretAccessKey = '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'\nconst region = 'ap-southeast-1'\n\nconst s3 = new S3({\n    secretAccessKey,\n    accessKeyId,\n    region\n})\n\nexport default () => {\n    const fileRef = React.useRef<HTMLInputElement>(null)\n\n    const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault()\n        try {\n            if (!fileRef.current || !fileRef.current.files) return\n            const file = fileRef.current.files[0]\n\n            const url = await makeSignedURL({filename: file.name, filetype: file.type})\n            console.log('A name was submitted', url)\n\n            await uploadToS3(url, file)\n\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    return (\n        <div>\n            Hello, World!\n\n            <form method='post' onSubmit={(event) => handleSubmit(event)}>\n                <label>\n                    Upload file to S3:\n                    <input type=\"file\" name=\"file-upload\" ref={fileRef}/>\n                </label>\n                <input type=\"submit\" value=\"Submit\"/>  \n            </form>\n        </div>\n    )\n} \n\ninterface makeSignedURLArgs {\n    filename: string,\n    filetype: string\n}\n\nconst makeSignedURL = async ({filename, filetype}: makeSignedURLArgs): Promise<string> => {\n    const signedUrl = await new Promise((resolve: (value: string) => void, reject) => {\n        const signedUrlExpireSeconds = 60 * 60;\n        s3.getSignedUrl('putObject', {\n            Expires: signedUrlExpireSeconds, \n            Bucket: 'capstone-robekoc',\n            Path: '/uploads/',\n            Key: filename, \n            ACL: 'bucket-owner-full-control',\n            ContentType: filetype\n        }, (err, url) => {\n            if (err) {\n                console.log(\"AHHHHHHHHH\")\n                reject(err)\n            }\n            resolve(url) \n        })\n    })\n    \n    return signedUrl\n}\n\nconst uploadToS3 = async (url: string, file: File) => {\n    await fetch(url, {body: file, method: \"PUT\"})\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAIA;AAJA;AAAA;AAMA;AAAA;AAAA;AACA;AAPA;AAMA;AACA;AAPA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAYA;AACA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAeA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAlBA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAqBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}